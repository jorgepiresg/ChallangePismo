// Code generated by MockGen. DO NOT EDIT.
// Source: transactions.go

// Package mocksStore is a generated GoMock package.
package mocksStore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	modelTransactions "github.com/jorgepiresg/ChallangePismo/model/transactions"
)

// MockITransactions is a mock of ITransactions interface.
type MockITransactions struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionsMockRecorder
}

// MockITransactionsMockRecorder is the mock recorder for MockITransactions.
type MockITransactionsMockRecorder struct {
	mock *MockITransactions
}

// NewMockITransactions creates a new mock instance.
func NewMockITransactions(ctrl *gomock.Controller) *MockITransactions {
	mock := &MockITransactions{ctrl: ctrl}
	mock.recorder = &MockITransactionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactions) EXPECT() *MockITransactionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactions) Create(ctx context.Context, create modelTransactions.MakeTransaction) (modelTransactions.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, create)
	ret0, _ := ret[0].(modelTransactions.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITransactionsMockRecorder) Create(ctx, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactions)(nil).Create), ctx, create)
}

// GetToDischargeByAccountID mocks base method.
func (m *MockITransactions) GetToDischargeByAccountID(ctx context.Context, accountID string) ([]modelTransactions.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToDischargeByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]modelTransactions.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToDischargeByAccountID indicates an expected call of GetToDischargeByAccountID.
func (mr *MockITransactionsMockRecorder) GetToDischargeByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToDischargeByAccountID", reflect.TypeOf((*MockITransactions)(nil).GetToDischargeByAccountID), ctx, accountID)
}

// UpdateBalance mocks base method.
func (m *MockITransactions) UpdateBalance(ctx context.Context, transaction modelTransactions.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockITransactionsMockRecorder) UpdateBalance(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockITransactions)(nil).UpdateBalance), ctx, transaction)
}
